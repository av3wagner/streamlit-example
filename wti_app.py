#Stand: 18.10.2023
from datetime import datetime
import pandas as pd
import numpy as np
import sqlite3
import dash
from dash import dash_table
from dash import dcc
from dash import html
import dash_bootstrap_components as dbc
from dash.dependencies import Input, Output
from dash import Dash, dcc, html, Input, Output, State, callback
import plotly.express as px
import plotly.graph_objects as go
import chart_studio.plotly as py 
from jupyter_dash import JupyterDash
import flask
import json
import requests
from urllib.request import urlopen
from prophet import Prophet
from pandas_datareader import data, wb
import base64
######################## Import data #####################
cnx = sqlite3.connect('data/KZAPP.db')
df=pd.read_sql_query("Select ID1, ID, IDNAME, POP, MKN, FKN FROM KZ_ALL where AGEN=1", cnx) 
df.head()
pop=pd.read_sql_query("Select ID, MKN, FKN FROM KZ_POP ORDER BY AGEN DESC", cnx) 
my_list=['< 5 лет','5 - 9 лет','10 - 14 лет','15 - 19 лет','20 - 24 лет','25 - 29 лет','30 - 34 лет','35 - 39 лет',
'40 - 44 лет','45 - 49 лет','50 - 54 лет','55 - 59 лет','60 - 64 лет','65 - 69 лет','70 - 74 лет','75 - 79 лет',
'80 - 84 лет','85+ лет']
map_obj = map(str.upper, my_list)
y = list(map_obj)
age_df = pd.read_csv('data/country_data_master.csv', 
                     usecols=lambda cols: 'perc' in cols or cols == 'country' or cols == 'median_age_total')
age_df = age_df.sort_values(['median_age_total'])
age_categories = ['0-14', '15-24', '25-54', '55-64', '65+']
country = pd.read_csv('data/country.csv')
dfkaz = pd.read_csv('data/gadm36_KAZ_2.csv')
dfkaz["unemp"]= np.random.uniform(10.4, dfkaz["IDNUM"])
districts = dfkaz.NAME_1.values
polygons = requests.get(
   'https://raw.githubusercontent.com/open-data-kazakhstan/geo-boundaries-kz/master/data/geojson/kz_1.json'
).json()
Tod_summy = pd.read_csv('data/tod_summy.csv')
tod2022 = pd.read_csv('data/tod2022.csv')
GRlist = ['Всего', 'Мужчины', 'Женщины']
tod_age = pd.read_csv('data/tod_age.csv')
GRlist = ['Всего', 'Мужчины', 'Женщины']

land = tod_age 
land =  land[land['AGE'] !="Всего"]
tod1 =  land[land['GR'] !="Всего"]
tod_summy = pd.read_csv('data/tod_summy.csv')
mkb_list = ['All',  'C33-C34', 'C50', 'E10-E14',
 'E24.4, F10, G31.2, G62.1, G72.1, I42.6, K29.2, K70', 'I10-I13, I15',
 'I20-I25', 'I60-I69', 'J12, J15, J16- J18', 'J40-J44',
 'K73, K74.0-K74.2, K74.6']
mkb=tod_summy[tod_summy['GR'] != "Всего"]
tod2=mkb[mkb['F1'] != "All"]
population=pd.read_csv('data/population.csv')
allpop=pd.read_csv('data/allpop.csv')
#pyperclip.copy("KZ-11")
df_stock=pd.read_csv('data/df_stock.csv')
df_pred=pd.read_csv('data/df_pred.csv')
FP=pd.read_csv('data/FP.csv')
###################### End Import data ###################
#DesktopWidth: 1920 DesktopHeight: 1080
colors = {
    'background': '#4A235A',
    'background2': 'black',
    'text': 'yellow'
}

colors = ['red', '#9C0C38', 'orange']
tabs_styles = {"height": "30px"}

tab_style = {
    "borderBottom": "1px solid #d6d6d6",
    "padding": "2px",
    "fontWeight": "bold",
    "vertical-align": "middle",
    "backgroundColor": "#111111", 
}

tab_selected_style = {
    "borderTop": "1px solid #d6d6d6",
    "borderBottom": "1px solid #d6d6d6",
    "backgroundColor": "#111111",
    "color": "yellow",
    "padding": "5px",
    "font-size": 18,
}

DesktopWidth="1707px"
DesktopHeight="960px"
image_path = 'assets/WagnerFoto.jpg'
Front_path = 'assets/Front.jpg'

Front_image = html.Img(src='assets/Front.jpg', style={"height":"200", "width":"150", 'padding-left':10,})
image = html.Img(src='assets/WagnerFoto.jpg', style={"height":"200", "width":"150", 'padding-left': 220,})
def b64_image(image_filename):
    with open(image_filename, 'rb') as f:
        image = f.read()
    return 'data:image/png;base64,' + base64.b64encode(image).decode('utf-8')

############## Markdown Blöcke ##############
DocuList= ['Об авторе (биография)', 'Об авторе (профиль)','Об авторе (проекты)', 
           'Об авторе (публикации)', 'Об авторе (Контакты)', 'Система: инструкция', 
           'Система: описание', 'Система: история создания'] 

resume = """
Свой трудовой путь я начал после окончания средней школы им. В.И.Ленина в Чимкентской области (с. Ленинское, ныне Казыгурт) 26.08.1968 года рабочим-строителем на Республиканской ударной комсомольской стройке, одновременно обучаясь на вечернем физмат-отделении Казахского Государственого Университете им. С.М.Кирова. Через 8 месяцев был призван в ряды Советской Армии. Службу проходил рядовым бойцом на Дальнем Востоке (г. Хабаровск, май/1969-июнь/1971).

В ноябре 1974г. я закончил свою пролетарскую карьеру и начал трудиться программистом/системотехником в двух Всесоюзных проектных институтах и двух отраслевых Вычислительных центрах (один Всесоюзный), за 4 года прошёл путь от инженера до заведующего отделом.
С мая 1986 заниамюсь научно-прикладной деятельностью как разработчик Автоматизированных систем научных исследований в медицине, экологии и других областях.
За это время мне удалось поработать в общей сложности более чем в 50 фирмах и организациях, в том числе:
* Трех Вычислительных Центрах 
* Пяти Проектных и Научно-исследовательских институтах
* Трех Научных Центрах 
* Институте Теоретической и прикладной математики (зав лабораторией) Академии Наук Республики Казахстан
* Двух Банках ФРГ
* Международной Страховой компании
* Международном Фармо-концерне (Merck & Co.)
* Пяти Clinical Research Organisanion
* В Университете (Мюнхен)
* В двух крупных международных производителях медицинского оборудования для кардио-пациентов
* В некоторых других организациях

После выхода на пенсию в марте 2016 года я продолжаю (вначале с 9/2015 параллельно с основной работой) работать дальше по моей специальности: Биостатистик/Data Scientist. Вначале как постоянный сотрудник или Freelancer в 10 различных фирмах.

C октября 2022 года я прекратил оплачиваемую работу по трудовым договорам с заказчиками и всецело занимаюсь инициативными проектами. За это время мне удалось реализовать два проекта в сфере Web-приложений и доложить их на двух научных конфекренциях и на рабочих совещаниях заинтересованных в этих проектах фирмах. 
В настоящее время совершенствую и расширяю функциональные возможности этих систем, ищу возможности оптимизации их работы. Одновременно с этим готовлюсь к новому проекту, надеюсь через полгода его завершить и развернуть на Web-сервере.
"""
profil = """
## Профессиональные и научные интересы
### Область деятельности:
* Разработка Автоматизированных систем научных исследований, разработка экспертных систем, разработка систем искуственного интеллекта, разработка Автоматизированных информационных и информационно-поисковых систем. 
Отрасли внедрения: Здравоохранения и медицина, Фармориндустрия, Банки, Страховые компании, Нефтеснабжение, Издательство,полиграфия и книжная торговля, Министерство обороны, Санитарно-эпидемиологическая служба, Наука и научное обслуживание
* Прикладная математическая статистика, управление большими объемами данных, анализ данных и моделирование (Система здравоохранения, клинические исследования, рыночные и фармоцевтические исследования, страхование и банки)
* Business Intelligence (BI)
* Хранилища данных (DW ) и банки данных (DB)
* Оптимизация ИТ процессов
* Big Data & Data Science

## Профессиональные научно-технические методы исследования
### Многомерные статистические методы:
* Генерализированные линейные модели (SAS и др.: PROC GENMOD)
* Смешенные линейные модели (SAS и др.: PROC MIXED)
* Нелинейные смешенные модели (SAS и др.: PROC NLMIXED)
* Генерализированные линейные смешанные модели (SAS и др.: PROC GLIMMIX)
* Анализ категоризированных данных (SAS и др.: PROC FREQ, PROC LOGISTIC etc.)
* Анализ времени дожития  (Survival Analysis: SAS и др.: PROC LIFEREG, SAS PROC PHREG)
* Численная оптимизация (SAS и др.: PROC OPTMODEL, SAS PROC IML etc.)

### Data Science:
* Linear Regression
* Logistic Regression
* Linear Discriminant Analysis
* Classificлtion and Regression Trees
* Random Forests
* Nearest Neighbors
* K Means Clustering Algorithm
* Learning Vector Quantization
* Support Vector Machines
* Bagging and Random Forest
* Boosting and AdaBoost
* Principal Component Analysis
* Multidimensional scaling
* t-Distributed Stochastic Neighbor Embedding
* Recurrent Neural Network(RNN)
* Convolutional Neural Network

### Другие рабочие области и нтересы:
* Методы Монте-Карло
* Безусловный точный статистический тест
* Mетаанализ клинических исследований
* Поиск информации в больших объемах неструктурированных данны(Text Mining)
* Автоматизация процессов при анализе данных клинических исследований и создании отчета о оценки качества медикаментов для правительственных и контрольных органов ФРГ
* Интеграция данных и программных продуктов
* Параллельное программирование

## Социальная компетентность:
* Многолетняя профессиональная трудовая деятельность в различных социальных слоях общества (строительная бригада, армейское подразделение, проектные и научные коллективы СССР, СНГ и стран Запада)
* Долговременная совместная жизнь и успешная профессиональная деятельность в мултиэтническом и мултиконфессиональном обществе

## Руководящие качества:
* 20 лет заведующий отделом научно-производственных коллективов (до 20 подчиненных)
* Многолетний школьный, студенческий, солдатский и спортивный организатор (лидер)
* Соучредитель и ученый секретарь объединения немецких ученых Казахстана, Almaty, 1995
* Соучредитель и вице-президент Ассоциации немецких предпринимателей Казахстана, Almaty, 1996
* Основатель и председатель научно-производственного кооператива(1988) «АЛГОРИТМ»  и руководитель частной научно-производственной фирмы (1990) «АЛЬТЕРНАТИВА». 
* Руководитель (ответственный исполнитель) научных проектов, отчетов, исследований 1988-1996 (Казахстан), 1998-2023(Германия). Результаты: аналитические отчеты, научные публикации и доклады; оказывалась помощь в анализе данных соискателям кандидатских (12) и докторских (6) ученых степеней. Соискателями были гражданане Казахстана, Германии, Австрии, Египта.


## Особенный опыт:
* Быстрая и успешная интеграция в Германии
* Более 25-ти лет плодотворной научно-практической деятельности в крупных европейских и американских национальных и интернациональных концернах
"""

proects="""
1.	 ## Data science: Инициативный проект «Аналитическая Информационная Система в медицине, здравоохранении и других сферах основанная на Web-Технологиях и методах Искуственного Интеллекта» (2023)

2.	 ## Data science проект для Asfendijarov Kazakh National Medical University, Almaty (https://kaznmu.edu.kz/eng/, 2023)

* Подготовка и доклад на Международном АсФен Форуме в Алмате 6.06.2023
* Проведение семинара по тематики разработки и применения систем Анализа данных в медицине на базе Веб-технологий и методов Искусственного Интеллекта
* Научные консультации и обработка данных диссертаций докторантов Университета

3.	 ## Научный проект в области анализа данных при исследовании инсультов, Acandis GmbH, Pforzheim (https://www.acandis.com/unternehmen/aktuelles/, 2022) 

* Анализ данных исследования при помощи SAS и подготовка информации для доклада на Международном научном конгрессе
* Выполнение других проектных работ по Кардио-тематике  

4.	 ## Научно-технический проект, PHARMALOG GmbH, Ismaning (https://www.pharmalog.com/, 2021-2022)

* Разработка проекта автоматизированного лексического и логического анализа Лог-протоколов SAS
* Разработка автоматизированной эксперной системы интеграции выходных результатов SAS-Анализа в форме сотен разрозненных документов в единый общий Word-документ со всеми элементами оформления (Таблица содержания, лого, Header, Footer и пр.)

5.	 ## Краткосрочные проекты Data Science & Advanced Analitics (BQS GmbH, Hamburg https://www.bqs.de/; LinkCare GmbH, Stuttgart https://www.link-care.de/; BG BAU, Berlin https://www.bgbau.de/), (2020-2021)
* Разработка различных автоматизированных систем анализа данных и формирование аналитических отчетов с применрением Web-технологий и методов Машинного обучения

6.	 ## Data Science проект, Cellent GmbH, Stuttgart (https://www.northdata.de/cellent+GmbH,+Fellbach/Amtsgericht+Stuttgart+HRB+760441, 2020)
* Анализ Big Data в Автоиндустрии с помощью современных средств и методов Data Science

7.	 ## Data Science проект, BIOTRONIK SE & Co. KG (Center for Clinical Research), Berlin (https://www.biotronik.com/en-de, 2018-2020)

* Анализ Home Monitoring данных больных с вживленными стимуляторами сердца при помощи современных средств и методов Data Science и Биостатистики

8.	 ## Проект: Riskcontrolling. Банк Земли Берлин, Берлин ФРГ (Landesbank Berlin AG) (https://www.lbb.de/landesbank/de/index.html, 2017-2018) 

* Миграция SAS 9.3 в SAS 9.4
* Оптимизация SAS EG проектов, в т.ч перевод проектов из SAS EG 5.3 в SAS EG 7.1
* Автоматизация и оптимизация эксплуатации SAS EG проектов в SAS Studio

9.	 ## Пилот & тест-проект: «Автоматизированный Анализ данных клинических исследований и формирование стандартного научного отчета (АСНИ)». Берлин ФРГ (ICRC-Weyer GmbH, Berlin) (https://www.weyermed.com/home/, 2018)
 
* Дальнейшее развитие и усовершенствование собственной системы «Автоматизированный анализ данных клинических исследований и автоматизированное создание научного отчета»
* Анализ данных данных типичных клинических исследований
* Формирование стандартного научного отчета на многих сотнях страниц (Таблицы, графики, списки)
* Сравнение неавтоматизированной системы ICRC Weyer GmbH и автоматизированной системы АСНИ-Wagner. Определение преимуществ и недостатков обоих систем


10.	 ##  Оптимизационный проект, Немецкий Кредитный Банк (Deutsche Kreditbank AG, Berlin) (https://www.dkb.de/, 2018) 

* Оптимизаия поиска клиентов при помощи Fuzzy logic в Банке данных ORACLE и перенос найденной информации в SAS EG  
  

11.	 ## Научно-технический проект в области анализа онкозаболеваний и экспертизы медицинских препаратов, Берлин ФРГ. (OnkoDataMed GmbH, Neuenhagen b. Berlin) (2017)

* Дальнейшая разработка, опытная эксплуатация и внедрение собственной системы „Анализ данных клинических исследований без активного вмещательства в процесс управления лечения (NIS) и автоматизированное формирование заключительного отчета“
* Анализ данных клинических исследований
* Формирование отчета (таблицы, графики, списки)
* Обучение пограммистов и статистиков фирмы работе с системой


12.	 ## Серия проектов в области Биостатистики, Data Scienсе и создании Аналитических Dashbord. Централный Институт Объединения кассовых врачей Германии, Берлин (https://www.zi.de, 2015-2019)

* Разработка и внедрение серии проектов по анализу данных и создании Аналитических Dashboard


13.	 ## Серия проектов в области Outcomes Research/HTA. MSD SHARP & DOHME GmbH, Haar bei München (https://www.msd.de,  https://www.merck.com/index.html, 2001-2016)

* Разработка и внедрение проекта: Разработка, опытная эксплуатация и внедрение статистической системы для опредения объема выборки при вычислении Kappa коэффициэнта с оценкой ситуации экспертами, количество которых превышает 2-х. Использованные программных средств и БД: SAS-9.4
* Разработка и внедрение проекта: Разработка, опытная эксплуатация и внедрение системы автоматизированной процесса анализа данных и формирования отчета для оценки в парламентском комитете эффективности новых медикаментов на основании §35a социального закона ФРГ раздела V. Использованные программных средств и БД: SAS-9.4, MS OFFICE, Autoit.
* Разработка, опытная эксплуатация и внедрение системы метаанализа данных клинических исследований как части отчета для оценки в парламентском комитете эффективности новых медикаментов на основании §35a социального закона ФРГ раздела V. Использованные программных средств и БД:  SAS-9.3, MS OFFICE, Autoit.
* Разработка и внедрение проекта: Разработка, опытная эксплуатация и внедрение системы расчета безусловного точного статистического теста как части отчета для оценки в парламентском комитете эффективности новых медикаментов на основании §35a социального закона ФРГ раздела V. Использованные программных средств и БД: SAS-9.3, MS OFFICE, Autoit.
* Разработка и внедрение проекта: Разработка, опытная эксплуатация и внедрение системы WEB-Mining как части отчета для оценки в парламентском комитете эффективности новых медикаментов на основании §35a социального закона ФРГ раздела V. Использованные программных средств и БД: SAS-9.3, MS OFFICE, Autoit.
* Разработка и внедрение проекта: Разработка, опытная эксплуатация и внедрение Outcomes Research Business Intelligence Systems (более 100 миллионов записей БД. Более 3 миллионов пациентов) Использованные программных средств и БД: SAS-9.2, ORACLE 10g, MS OFFICE, VBA, Autoit, VBS и пр.
* Разработка и внедрение проекта: Многомерный статистический анализ и моделирование в области экономики здравоохранения и эпидемиологии (множество проектов). Использованные программных средств и БД:  SAS-6.12/SAS-9.3, STATA-7/STATA-11, R, WinBUGS и пр.

14.	 ## Проекты Data Warehouse. Страховая компания ARAG, Мюнхен ФРГ (ARAG-Lebensversicherungs-AG, München) (https://www.arag.de/unternehmen/, 1999-2001)

* Разработка, опытная эксплуатация и внедрение диалоговой системы «Статистика страховых сумм умерших клиентов» (SAS/BASE, SAS/AF, SAS/EIS) и диалоговой системы «Состояние полисов клиентов страхования жизни» (SAS/BASE, SAS/AF, SAS/EIS).
* Разработка, опытная эксплуатация и внедрение диалоговой системы для отдела математики медицинского страхования (SAS/BASE, SAS/AF, SAS/EIS) и специального программного средства для квалифицированногоо экспорта данных из многомерного отчета хранилища данных (DW) в Microsoft-Excel.

15.	 ## Специальный проект для отдела Outcomes Research, Мюнхен ФРГ (MSD SHARP & DOHME GmbH, Haar bei München (1999)

* Создание и сопровождение многомерного банка данных о пациентах включающего классификации (Aнатомически-технический код (ATC), Интернациональную систему классификации болезней (ICD-10), лекарственные дневные дозы по классификации ВОЗ (EDD)) под управлением SAS 6.12
* Эпидемиологический анализ обеспечения пациентов медикаментами с применением инструментов и методов современной клинической эпидемиологии, например концепции кумуляции ресурсов
* Таблично-графическое компрессия результатов анализа 
* Разработка и внедрение экспертной системы электронной документации состоящей из более чем 1.000 слайдов презентаций научно-технических результатов.

16.	 ## Проект анализа заболеваний и экспертизы медицинских препаратов, Мюнхен ФРГ (Gesellschaft für Marketing-Service GmbH, München Bereich: Medizin) (1998-1999)

* Биометрический анализ клинических исследований фазы III в области  хронического вирусного гепатита C
* Биометрический анализ данных в многолетних наблюдениях за пациентами участвующих в специальных клинических исследованиях
* Создание презентаций в рамках этих анализов
* Участие в разработке биометрического научного отчета согластно стандартов GCP/ICH


17.	 ## Пpоекты для Института теоретической и прикладной математики Академии Наук Республики Казахстан и Научного Центра Минздрава, Almaty (Kasachstan) (https://nauka-nanrk.kz/ru/struktura-nan-rk/, 1993-1997)

* Разработка программно-технических средств гарантированной криптостойкости национальной системы защиты информации (Заказчик: Министерство Обороны РК)
* Методы количественного и качественного анализа в сложных объектах
* Анализ, моделирование и прогнозирование сложных медико-социальных явлений и феноменов (Заказчики: Научно-исследовательские институты, клиники, подразделения и ВУЗы Минздрава РК)


18.	 ## Научно-технические проекты в ВЦ Минздрава и Республиканской Санэпидстанции Казахстана (https://www.gov.kz/memleket/entities/dsm?lang=ru, 1986-1993)

* Планирование, управление данными и статистический анализ клинических исследований научных институтов и отделов Министерства здравоохранения Казахстана
* Разработка, опытная эксплуатация и внедрение Системы санитарно-эпидемиологического мониторинга в Казахстане (4 региона, 19 областей, более 240 санитарно-эпидемиологических станций). Недельный сбор данных, обновление баз данных, анализ данных. Это была пионерская работа, выполненная в кратчайшие сроки и единственная в этом роде в бывшем СССР. Система реализовала многие функции аналогичных систем, созданных во время COVID-19 (2019-2022), например: Robert-Koch Institut (Germany, https://www.rki.de/DE/Home/homepage_node.html), John Hopkins University (USA, https://www.jhu.edu/))

19.	 ## ИТ-проекты для различных отраслей народного хозяйства СССР и КазССР (1974-1986) 
#### Занимаемые должности: 
* Заведующий отделом IT-проектов, 7 лет
* Зав группой IT-проектов, 2 года 
* Программист/Senior программист IT-проектов, 3 года
"""

papers2023="""
# Список научных публикаций и докладов Вагнера Александра Викторовича за период 1999-2023 по теме «Автоматизация научных исследований в здравоохранении» в европейских журналах, на научных конгрессах и конференциях



1.	Александр Вагнер, Применение методов машинного обучения, Искусственного интеллекта и Веб-технологий в системе здравоохранения. Международном форум: Asfen.forum, новое поколение-2023. 6-7.06.2023, Алматы. : https://news.kaznmu.edu.kz/eng/asfen-forum-new-generation-2023/

2.	Wagner A, Integrierte Technologie für die Erstellung der Webbasierten Künstliche Intelligenz Dashboards. KSFE 2022: DIE KONFERENZ FÜR DATA SCIENCE. AUSBILDUNG. ANWENDUNG. AUSTAUSCH. 14.-15.09.2022, Wiesbaden. https://saswiki.de/display/KONFERENZEN/KSFE+2023?preview=/37421063/37421086/NE-01-1430-1500-Wagner-Webbasiertes-Multiple-Kernel-System.pdf

3.	Wagner A,. Holstiege J. Vortrag und Softwarepräsentation: Ein SAS basiertes System zur automatisierten Auswertung und Berichterstellung von klinischen Studien. 23. Konferenz der SAS-Anwender in Forschung und Entwicklung (KSFE 2023); 07.-08.03.2019; Berlin https://saswiki.de/display/KONFERENZEN/KSFE+2019?preview=/19726371/19726410/23_KSFE_2019_Wagner_-_Ein_SAS_basiertes_System_zur_automatisierten_Auswertung_und_Berichterstellung_von_klinischen_Studien.pdf

4.	Wagner A, Krobot K J, Auracher V, Scheuringer M. Poster und Softwarepräsentation: Exakte unbedingte Fallzahl- und Powerberechnung: Eine SAS-basierte Lösung für Stichprobengrößen über 1000. 19. Konferenz der SAS-Anwender in Forschung und Entwicklung (KSFE 2015); 26.-27.03.2015; Hannover https://saswiki.de/display/KONFERENZEN/KSFE+2015?preview=/21266569/21266609/19_KSFE_2015_Wagner_-_Exakte_unbedingte_Fallzahl-_und_Powerberechnung_Eine_SAS-basierte_L%C3%B6sung_f%C3%BCr_Stichprobengr%C3%B6ssen_%C3%BCber_1000.pdf

5.	Wagner A, Tewaag J, Sahakyan N, Scheuringer M, Krobot K J. Poster und Softwarepräsentation: Unbedingte Exakte Tests: Eine SAS basierte Lösung zur effizienten Berechnung für Stichprobengrößen über 1000. Friede T, Hilgers R, Minkenberg R (Ed). KSFE 2014: Proceedings der 18. Konferenz der SAS-Anwender in Forschung und Entwicklung (KSFE); 27.-28.03.2014; Göttingen, Deutschland. Aachen: Shaker; 2014. S. 343-352 https://saswiki.de/display/KONFERENZEN/KSFE+2014?preview=/21266616/21266907/18_KSFE_2014_Wagner_-_Unbedingte_exakte_Tests_Eine_SAS_-_basierte_L%C3%B6sung_zur_effizienten_Berechnung_f%C3%BCr_Stichprobengr%C3%B6%C3%9Fen_%C3%BCber_1000.pdf

6.	Karl J Krobot, Alexander Wagner, and Uwe Siebert. Risk factor levels, risk factor combinations, and residual coronary risk: population-based estimates for secondary prevention patients using statins European Journal of Cardiovascular Prevention & Rehabilitation 1741826710392668, first published on February 14, 2011 as doi:10.1177/1741826710392668 http://cpr.sagepub.com/content/early/2011/02/13/1741826710392668.full.pdf+html http://cpr.sagepub.com/content/early/2011/02/13/1741826710392668.full.pdf

7.	Krobot KJ, Michailov GV, Wagner A. Vierjährige Behandlungspraxis mit retardierter Nikotinsäure in Deutschland: Therapieadhärenz und Erhaltungsdosis. Deutsche Gesellschaft für Kardiologie 2010.

8.	KASKEL, P.; WAGNER, A.; ULLMANN, A.J.; KROBOT, K.J. How can the care of patients in the supportive therapy be improved? Analysis on the example of the use of caspofungin versus liposomal amphotericin B for empirical therapy for suspected invasive fungal infection. Presentation at: Health Services Research 9th German Conference and German Coalition for Patient Safety 5th Annual Meeting, Bonn, Germany, 9/30/10 - 10/2/10

9.	Wagner A, Scheuringer M, Krobot KJ. Automatisierungssystem für Metaanalysen und zur Erstellung von hochpräzisen Forest-Plots. In Ulrich Rendtel, Peter Schirmbacher, Odej Kao, Wolf F. Lesener, Ralf Minkenberg (Hrsg.): KSFE 2010. Proceedings der 14. Konferenz der SAS®-Anwender in Forschung und Entwicklung (KSFE). Shaker Verlag, Aachen 2010. ISBN 978-3-8322-9324-8 https://saswiki.de/display/KONFERENZEN/KSFE+2010?preview=/5275750/21266515/14.KSFE-2010-Wagner-Autoit_Meta.au3.sas

10.	Krobot, K.J., Michailov, G.V., Wagner, A. Four-year treatment practice with extended-release niacin in Germany: adherence, treatment gaps and daily maintenance dose. Eur Heart J 2009; 30:590. http://spo.escardio.org/AbstractDetails.aspx?id=68681&eevtid=33

11.	Wagner, A., Krobot, KJ. Aktuariell diskontiertes Überleben aus webbasierten Rohdatenbanken. In: Spilke J., Becker C., Haerting J., Schumacher E. (Hrsg.) KSFE 2009. Proceedings zur 13. Konferenz der SAS-Anwender in Forschung und Entwicklung (KSFE). ISBN: 978-3-8322-8420-6. Shaker Verlag, Aachen 2009. https://saswiki.de/display/KONFERENZEN/KSFE+2009?preview=/21267185/21267221/13.KSFE-2009-Wagner-Webbasierte_Rohdatenbanken.pdf#KSFE2009-DataMining/WebMining/Datenmanagement

12.	Wagner, A., Krobot, J. K. Softwareintegration: Comprehensive Meta Analysis und SAS in der klinischen Forschung. German Medical Science GMS Publishing House; 2008. Doc SD2-2. http://www.egms.de/en/meetings/gmds2008/08gmds243.shtml

13.	Kaskel P, Tuschy S, Wagner A, Bannert C, Cornely OA, Glasmacher A, Lipp HP, Ullmann AJ. Economic evaluation of caspofungin vs liposomal amphotericin B for empirical therapy of suspected systemic fungal infection in the German hospital setting. Ann Hematol. 2008 Apr;87(4):311-9. http://www.springerlink.com/content/00t8641n8h8gl235/?p=3d427158ff604b869dbec3fa4f158360&pi=1

14.	Wagner A. SAS Tabellen und Graphiken als Powerpoint-Applikationen. Alte Probleme und neue Möglichkeiten. In: R-D Hilgers, N Heussen, W Herff, C Ortseifen (Hrsg) KSFE 2008 Proceedings zur 12. Konferenz der SAS-Anwender in Forschung und Entwicklung (KSFE). ISBN: 978-3-8322-7445-0 Shaker Verlag, Aachen 2008. https://saswiki.de/display/KONFERENZEN/KSFE+2008?preview=/21267252/21267272/12.KSFE-2008-Wagner-Tabellen_und_Grafiken_als_Powerpoint-Applikation.pdf

15.	Wissing H, Müller E, Winkler M, Weigand M, Wagner A, Kaskel P, Hoppe-Tichy T. NEPHROTOXICITY-ASSOCIATED COSTS IN THE TREATMENT OF INVASIVE CANDIDIASIS WITH CONVENTIONAL AMPHOTERICIN B VERSUS CASPOFUNGIN IN INTENSIVE CARE MEDICINE IN GERMANY. Presentation at Deutsche Sepsisgesellschaft 3rd International Conference,Weimar, Germany, 05Sep2007 - 08Sep2007

16.	Wagner A, Kaskel P: EINE MONTE CARLO SIMULATION UNTER WINBUGS UND SAS. In: Muche und Bödecker (Hrsg.): Abstraktbuch der 11. Konferenz der SAS Anwender in Forschung und Entwicklung, Ulm, Deuschland, 1. - 2. März 2007. Ulm: Universität Ulm 2007, Seite 26 f.

17.	Wissing H, Ballus J, Nocea G, Krobot KJ, Kaskel P, Kumar RN, Mavros P: LONGITUDINAL EVALUATION OF ICU RELATED FLUCONAZOLE USE IN SPAIN AND GERMANY. Presentation at Intensive Care And Emergency Medicine 27th International Symposium (ISICEM), Brussels, Belgium, 27Mar2007.

18.	Krobot KJ, Carides GW, Wagner A, Burke TA. Losartan-based versus atenolol-based therapy in patients with hypertension and left ventricular hypertrophy: An economic evaluation of the Losartan Intervention For Endpoint Reduction In Hypertension (LIFE) Study for Germany. Value in Health 2006; 9(6): 353. http://onlinelibrary.wiley.com/doi/10.1111/j.1524-4733.2006.00134_1.x/pdf

19.	Kaskel P, Tuschy S, Wagner A, Bannert C, Cornely OA, Glasmacher A, Lipp HP, Ullmann AJ. ECONOMIC EVALUATION OF CASPOFUNGIN (CANCIDAS®) VERSUS LIPOSOMAL AMPHOTERICIN B FOR EMPIRICAL THERAPY OF SUSPECTED SYSTEMIC FUNGAL INFECTION IN THE GERMAN HOSPITAL SETTING. Presentation at ISPOR 9th Annual European Congress, 28- 31 October 2006, Copenhagen, Denmark.

20.	Krobot KJ, Ulrich V, Wagner A, Zeidler H: Health Insurance-related access to Cyclooxygenase-II-selective Treatment in Germany. Ann Rheum Dis. 2003; 62 (Suppl. 1): 347. 

21.	K. J. Krobot, V. Ulrich, A. Wagner, H. Zeidler. Verordnung von Cyclooxygenase-II-selektiven Inhibitoren in Deutschland: Macht die Art der Krankenversicherung einen Unterschied? Informatik, Biometrie und Epidemiologie. URBAN & FISCHER. Band 33, Heft 2-3/2002, S. 416

22.	W. W. Bolten, B. Lang, A. V. Wagner, K. J. Krobot. Konsequenzen und Kosten der NSA-Gastropathie in Deutschland. Akt. Rheumotol. 24 (1999) 127-134 https://www.thieme-connect.de/ejournals/pdf/rheuma/doi/10.1055/s-2008-1043560.pdf


# Список избранных научных публикаций Вагнера Александра Викторовича за период 1988-1996 по теме «Автоматизация научных исследований в здравоохранении» в СССР/Республике Казахстан



23.	Вагнер А.В., Жузжанов О.Т., Жузжанова Н.О.Формирование дифференцированного норматива бюджетного финансирования на одного жителя в год (методические рекомендации). Алматы, 1996

24.	Сакбаев О. С., Вагнер А.В. Совершенствование изучения и оценки здоровья населения. Алматы, 1995. Издательство «Наука», – 364 с.

25.	Вагнер А.В., Казангапов. Разработка интеллектуальных систем в исследовании состояния здоровья населения Казахстана. Юбилейная научная конференция посвященная 50-летию развития математики в в Академии наук Казахстана. Алматы, 1995

26.	Вагнер А.В. Автоматизация медико-экологических исследований. Институт теоретической и прикладной математики, 30 лет. Алматы, 1995

27.	Вагнер А.В., Мертенов Б.М. Автоматизированные системы научных иследований в кардиологии. Здоровье населения Республики Казахстан и пути его изучения. Алматы, 1995

28.	Вагнер А.В., Балабаев Т.Ф. Многомерная классификация областей Казахстана по основным медико-биологическимпоказателям с помошью корреспондентного анализа. Проблемы социальной медицины и управления здравоохранением, Алматы, 1995

29.	Вагнер А.В., Казангапов А.Н. Комплекс программных средств «Создание баз данных и пользовательских приложений АСНИ Экология и здоровья Карачаганака». Именное авторское свидетельство интеллектуальной собственности патентного ведомства республики Казахстан №225, приоритет 15.07.1994

30.	Вагнер А.В., Сатбеков Ж. С. Комплекс программных средств «Создание базы данных и анализ заболеваний среди мужчин, работающих на предприятиях Алматы». Именное авторское свидетельство интеллектуальной собственности патентного ведомства республики Казахстан №224, приоритет 15.07.1994

31.	Вагнер А.В. Организация Автоматизированной системы научных исследований и управления по материалам регионов экологических бедствий Казахстана и официальнх инфформационных систем. Медико-социальные аспекты здоровья населения регионов экологических бедствий Казахстана, Алматы, 1994

32.	Вагнер А.В., Спатаев М.Б., Красников В. Н. Санитарно-эпидемиологический мониторинг и математико-статистическое моделирование инфекционной заболеваемости в Республике Казахстан. Актуальные вопросы гигиены и профпаталогии в Казахстане, Алматы. 1993

33.	Вагнер А.В. Основные положения по созданию интегрированного банка данных «Экология Казахстана». Материалы научно-практической конференции: Экология Карачаганака. Алма-Ата, 1992

34.	Вагнер А.В., Кулманов М.Е., Слажнева Т.И., Корчевский А.А., Красников В.Н., Якупов В.С. Концепция создания и рзвития республиканской межотраслевой автоматизированной системы «Профилактика». Тез. Докл. Рег конф.: Проблемы экологии человека в Сибири. Новокузнецк, 1990

35.	Вагнер А.В., Толкинбекова Ш.Г. Автоматизированная система научных исследований Минздрава Казахской ССР. Материалы всес. Научной конференции: Информатика в здравоохранении. Москва, 1990

36.	Вагнер А.В. Разработка экономических показателей для управления здравоохранением при помощи математико-статистического моделирования. Тез. Докл. Респ. Научно-практической конференции молодых ученых и специалистов: Актуальные проблемы охраны и укрепления здоровья населения Казахстана. Алма-Ата, 1990

37.	Вагнер А.В., Жакашев Н.Ж., Тезекбаева Ж.Г. Создание автоматизированной системы научных исследований для оценки влияния факторов производственной и окружающей среды на здоровье населения. Материалы всес. Научной конференции: Информатика в здравоохранении. Москва, 1990

38.	Вагнер А.В. Концептуальные основы проектирования базы данных для автоматизации научных исследований в профилактике сердечно-сосудистых заболеваний. В сборнике: Первичная и вторичная профилактика сердечно-сосудистых заболеваний. Алма-Ата, 1989

39.	Вагнер А.В., Ким В.М. Концептуальные основы проектирования АСУ «Профилактика». Тез.докл.всесоюз.научн.конф.: Проблемы мониторинга за здоровьем населения промышленных городов. Ангарск, 1989

40.	Вагнер А.В. Обработка данных в научно-медицинских исследованиях. Тез.докл.2-ой респ.конф.: Проблемы вычислительной математики и автоматизации научных исследований. Алма-Ата, 1988

"""
kontakt="""

Уважаемые посетители данной страници! Если у вас возникли вопросы по применению этой системы в своей хозяйственной деятельности, в научно-технических или позновательных целях, вы можете в любое время обращаться за консультациями или справками. Электронный адрес и телефон приведен ниже.
Автор будет благодарен за конструктивную критику и конкретные предложения по совершенствованию системы. Желающим участвовать в соместной разработке этого и будущих проектов - милости просим!



### Место жительства:
ФРГ, Берлин

### Телефоны:
* Мобиль.:  +49 152 2768 3505 
* WahtsApp: +49 176 9854 1986

### Web:
[![Generic badge](https://img.shields.io/badge/Github-Visit-white.svg?style=for-the-badge&logo=github&logoColor=white)](https://github.com/av3wagner)  
[![Generic badge](https://img.shields.io/badge/Email-Send-yellow.svg?style=for-the-badge&logo=mail.ru&logoColor=white)](mailto:av3.wagner@gmail.com)  

""" 
System1=""" 
# Запуск «АИС ВTИИ»
Для запуска «АИС ВТИИ»  необходимо использовать линк: https://nnkz.onrender.com/ После нажатия на него появляется титульная страница системы. В зависимости от скорости работы интернета в данной местности загрузка системы может длиться несколько минут. После появления титульного листа системы нажмите клавишу  F11. В этом случае будет использованеа всю площадь экрана монитора для визуализации. Для того чтобы вернуться в прежнее состоянии монитора вновь нажмите  клавишу F11. Для масштабирования изображения, то есть его увеличения или уменьшения, используйте комбинацию клафиш: «Ctr+», «Ctr-». 
* Страница №1 «Титул-лист системы»
Данная страница является титульной для системы и не используется для проведения обработки данных и визуализации результатов.

## Страница №2 «Старт»
На этой странице Системы расположена административная карта Казахстана. При нажатии мышкой на одну из областей активируются все графики и таблицы этой области, расположенные на страницах №5, №6. 
На этой же странице находятся:
* График (динамический) о смертности в области в 2022г. для выбранной категории населения (данные условные)
* Таблица (динамическая) о смертности в области в 2022г. для выбранной категории населения (данные условные)
Категория населения ('Всего', 'Мужчины', 'Женщины') выбирается из окошка нисподающего меню 'Выберите группу для анализа:'. После выбора происходит динамическое обновление графика и таблицы.

## Страница №3 «Смертность населения в 2022г»
На этой странице Системы расположены два графика.
* Правый график (статический) о смертности (всего) в области в 2022г. По классификации МБК-10 (данные условные)
* Левый график (динамический) для выбранной группы смертности ('All', 'C50', 'E10-E14', 'I120-I125', пр.), группа выбирается из окошка нисподающего меню 'МКБ-10'.

## Страница №4 «Pаспределение населения по годам»
На этой странице Системы расположены:
* Два графика о распредеелении населения по годам и по полу и возрастной группе
* Две сответствующие таблицы под нимитаблицы под ними. Графики и таблицы статистические, основаны на реальных статистических данных.

## Страница №5 «Демография»
* На этой странице Системы расположены два динамических графика о распределении населения по районам избранной области. Область выбирается при клике мышкой на соответствующую область, расположенную на карте Казахстана. За этим следует автоматическае обновления графиков. Данные условные.

## Страница №6 «Популяция»
* На этой странице Системы расположены два динамических графика о распределении населения по районам избранной области. Они обновляются одновременно с графиками на странице №5.

## Страница №7 «Возрастное распределение по странам»
На этой странице Системы расположены два статических графика о распределении возрастной медианы населения по избранным странам мира. Использованы данны ВОЗ. Графики можно  после небольших изменений в программе сделать динамическими.
* Страница №8 «Прогноз заболеваемости»
* На этой странице Системы расположены динамический график и таблица прогноза травматизма рабочих на производстве в одной европейской стране. Реальные данные были зашумлены и изменены без искажения их динамики и структуры. Прогноз выполняется в реальном режиме времени с помощью программы Анализа времепнных рядов, входящей в систему Python. График можно сужать-расширять по временной оси с помощью движка или выбора интервала прогноза в верхнем левом углу графика. 

## Страница №9 «O системе и авторе» 
* На этой странице Системы при помощи выбора из окошка нисподающего меню 'Информация о системе' можно открыть выбранный документ для просмотра, в том числе: 'О системе', 'История создания системы', 'Инструкция по эксплуатации', 'Об авторе'.
""" 

System2=""" 
## Цель создания «АИС ВTИИ»
### Целью создания «АИС ВТИИ» является повышение уровня и качества управления в организациях и ведомствах, частных фирмах за счет внедрения передовых Информационных технологий и методов анализа и прогноза данных и параметров о состоянии управляемого объекта, например, здоровья населения, разработки оптимальных моделей управления рессурсами и определения тенденций развития отрасли или организации.


## Hазначение «АИС ВTИИ»
### Система «АИС ВТИИ» предназначена для руководящих работников и специалистов, занятых анализом информации, прогнозом и выработкой стратегических направлений совершенствования управения и оптимизации отрасли и/или организации


## Задачи, решаемые «АИС ВTИИ»При помощи «АИС ВТИИ» решаются следующие задачи:
* Визуальный анализ данных при помощи интерактивных графиков и таблиц различного типа и свойста, отоброжающих в динамическом режиме например, состояние основных показателей здоровья населения территории
* Составление аналитических отчетов о состоянии параметров и показателей управляемого объекта, например, здоровья населения территории
* Научный анализ данных и прогноз при помощи современных средств продвинутой статистики (Advanced Statistics) и методов Искуственного Интеллекта
* Построения моделей оптимизации работы отрасли или организации
* Другие оперативные и стратегические задачи


## Область применения «АИС ВTИИ»
Данная Система разработана для использования на всех уровнях управления. Это означает, что как на государственном (с расширенным функциональным набором), так и на областных/территориальных уровнях система работает идентично. Привелигированный пользователь может использовать без ограничения все данные и возможности системы. Другие пользователи имеют доступ только к данным конкретной области. Система построена по модульному принципу и является открытой для развития и расширения.

## Методы решения задач «АИС ВTИИ»:
* Агрегации данных и создания многомерных отчетов
* Визуализации данных (динамические графики, карты, пр.)
* Классической прикладной математической статистики
* Методы статистического моделирования, в том числе Монте Карло
* Методы Искуственного Интелекта, в том числе: Машинного обучения(Machine learning), глубокого обучения(Deep learning)
* Математические Методы оптимитзации (Operations Research) 
* Эвристические методы

## Исполнители проекта
### Ответственный исполнитель от заказика:
* Назначается до начала проведения работ
### Ответственный исполнитель от подрядчика:
* Dr. Alexander Wagner

## Сроки исполнения проекта и план работы первом этапе
* Создание рабочего коллектива из представителей заказчика и исполнителя на первом этапе из 2-4 человек, обладающих необходимой научно-практической квалификацией и многолетним опытом создания и внедрения в практику аналогичных систем в стране заказчика и за рубежом
* Определение и согласование концепта «АИС ВТИИ», временных и стоимостных характеристик её создания, сответственно внедреня
* Определение и согласование первоочередных задач
* Определение и согласование технических характеристик и объема Базы данных
* Создание работающей в локалном, соответственно серверном варианте системы

### Определение и согласование режима работы заказчика и исполнителя, в том числе:
* Регулярные онлайн совещания
* Обмен данными и результататами

## Эффект от внедрения системы

### Экономический эффект от внедрения «АИС ВTИИ» состоит:
* В сокращении времени на обработку данных, повышение качества выходных результатов и минимизации неоптимальных затрат на ИТ
* В сокращение стоимости затрат на компьютероную технику, так как система расположена в Веб-пространстве
* В дополнительной прибыли от применения оптимальных решений, сокращающие непроизводительные расходы
* В дополнительной прибыли от обучения слушателей курса «Школа разработчика Data Science» (по возможности)
* Другие выгоды

### Научно-технический эффект состоит:
* В использовании современных Информационных технологий и программного обеспечения, соответствующего развитию науки и мировой практики в создании аналогичных систем
* В принятии оптимальных решений ранее невозможных 

### Социальный эффект состоит:
* В подготовке кадров на курсах повышения квалификации «Школа разработчика Data Science» для руководящего состава, специалистов и всех заинтересованных лиц (платные) в онлайн и оффлайн режимах. Это позволит, в том числе, ликвидировать дефицит специалистов и решить проблему занятости молодежи. 

### Имиджевый эффект состоит в повышение авторитета организации-заказчика и страны за счет:
* Презентации «АИС ВTИИ» на международных конференциях
* Выпуск монографии по теме современных методов анализа и прогноза здоровья населения
* Кооперации с ведущими специализированными организациями (ВОЗ, Унивеситеты, специализированные фирмы, занятые созданием интеллектуальных систем, например в здравоохранении)
* Научных публикаций в международных журналах и в Интернете
* Контактов с ведущими специалистами в данной области науки и техники
""" 

System3=""" 
# Опыт разработки и внедрения Аналитических информационных систем в Казахстане
Работы по создании Аналитических информационных систем в здравоохранении Казахстана были начаты в «Республиканском информационно-вычислительном центре Минздрава Каз ССР (РИВЦ)». Для этого в мае 1986 года был создан отдел «Разработка и внедрение научно-исследовательских задач в медицине», руководить отделом был приглашен А.В.Вагнер. 
С 1994г. работы в этом направлении были продолжены в «Научном центре медицинских и экономических проблем здравоохранения» Министерства здравоохранения Республики Казахстан. Для этого была создана совместная лаборатория «Математического моделирования в медицине и экологии». Учредителями лаборатории были: Институт теоретической и прикладной математики Национальной Академии Наук РК и вышеназванный Центр. Заведующим лабораторией был назначен А.В.Вагнер.


# Официальная информация о создани ННЦРЗ
### «Республиканский центр развития здравоохранения, РЦРЗ» Министерства здравоохранения Республики Казахстан был создан в 2011 году путем слияния двух организаций:
* Республиканский информационно-аналитический центр (РИАЦ)*
* Институт развития здравоохранения (ИРЗ)**


### Позже РЦРЗ был переименован в «Национальный научный центр развития здравоохранения имени Салидат Каирбековой»
* РИАЦ был создан Постановлением Правительства Республики Казахстан от 4 декабря 2009 года № 2017 путем слияния областных медицинских информационно-аналитических центров. РИАЦ возглавил профессор Абилкасимов Ерасыл Абилкасимович. Основной задачей РИАЦ было информационно-аналитическое сопровождение реформ в системе здравоохранения. В 2011 году РИАЦ вошел в состав РЦРЗ
** Институт развития здравоохранения был правоприемником Научного центра медицинских и экономических проблем здравоохранения, созданного Постановлением Кабинета Министров Республики Казахстан от 18 июля 1994 г. N 802 «Об открытии научного центра медицинских и экономических проблем здравоохранения Министерства здравоохранения Республики Казахстан».


### Руководителями Научного центра медицинских и экономических проблем здравоохранения были известные организаторы здравоохранения РК, как:
* Жузжанов Орманбек Туекбаевич,
* Слажнева Татьяна Ивановна,
* Абилкасимов Ерасыл Абилкасимович,
* Ким Сергей Васильевич.
"""

##############################################
app = JupyterDash(external_stylesheets=[dbc.themes.SLATE])
server=app.server
svalue="KZ-00"
rcountry=country[country['ID'] == svalue]

def fig_map(df):
    figm = px.choropleth(
        dfkaz,
        geojson=polygons,
        locations="NAME_1",
        hover_name= "ID", #"NAME_1",
        featureidkey="properties.NAME_1",
        color="unemp",
        color_continuous_scale="Viridis",
        title="Republic Kazakhstan",
        template="plotly_dark",
        range_color=(0, 12),
        width=1000, height=600,
     )
    figm.update_layout(
            autosize=False,
            margin = dict(
                    l=0,
                    r=0,
                    b=0,
                    t=0,
                    pad=4,
                    autoexpand=True
                ),
          )   
    figm.update_geos(fitbounds="locations", visible=True)
    return figm

def FigureTod1(value):
    print("FigureStart wurde gestartet!")
    figure = px.bar(tod1,  x='AGE', y="Count",
    barmode="group",                 
    title="Распределение смертности по возрасту и полу",             
    orientation= 'v',
    height=605,                     
    hover_data={'Count': False},
    text='Count',                    
    labels=dict(y="Количество", x="Boзраст"), 
    color="GR",    
    ).update_layout(
    font=dict(family="silom",
               size=18, 
               color="Yellow"),
    plot_bgcolor = "#111111",
    paper_bgcolor= "#111111")
     
    figure.update_xaxes(tickangle=45, title_text="Возраст",title_font={"size": 18},
    title_standoff=5, tickfont=dict(family='silom', color='Yellow', size=14))
    figure.update_yaxes(title_text="Количество",title_font={"size": 18},title_standoff=5)
    
    figure.update_layout(title={
        'y':0.99,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'},
        font=dict(family="silom",size=18,color="Yellow"))
    return figure  

def FigureTod2(value):
    print("FigureStart wurde gestartet!")
    figure = px.bar(tod2,  x='F1', y="SUMM",
    barmode="group",                 
    title="Распределение смертности по полу и МКБ-10",             
    orientation= 'v',
    height=605,                     
    hover_data={'SUMM': False},
    text='SUMM',                    
    labels=dict(y="Количество", x="Boзраст"), 
    color="GR",    
    ).update_layout(
    font=dict(family="silom",
               size=18, 
               color="Yellow"),
    plot_bgcolor = "#111111",
    paper_bgcolor= "#111111")
     
    figure.update_xaxes(tickangle=45, title_text="Возраст",title_font={"size": 18},
    title_standoff=5, tickfont=dict(family='silom', color='Yellow', size=14))
    figure.update_yaxes(title_text="Количество",title_font={"size": 18},title_standoff=5)
    
    figure.update_layout(title={
        'y':0.99,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'},
        font=dict(family="silom",size=18,color="Yellow"))
    return figure 

def FigurePop(value):
    print("FigurepoРulation wurde gestartet!")
    figure = px.bar(population,  x='Age', y="Count",
    barmode="group",    
    title="Распределение население области по возрасту в 2021-2022гг",             
    orientation= 'v',
    height=605,                     
    hover_data={'Count': False},
    text='Count',                    
    labels=dict(y="Количество", x="Boзраст"), 
    color="Year",    
    ).update_layout(
    font=dict(family="silom",
               size=18, 
               color="Yellow"),
    plot_bgcolor = "#111111",
    paper_bgcolor= "#111111")
     
    figure.update_xaxes(tickangle=45, title_text="Возраст",title_font={"size": 18},
    title_standoff=5, tickfont=dict(family='silom', color='Yellow', size=14))
    figure.update_yaxes(title_text="Количество",title_font={"size": 18},title_standoff=5)
    
    figure.update_layout(title={
        'y':0.99,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'},
        font=dict(family="silom",size=18,color="Yellow"))
    return figure  


def plot_countries(value):
    dfM = Tsummy[Tsummy['GR'].isin(countries)]
          
    return {
        'data': [go.Bar(x=GR_categories,
                        y=[0 for i in range(len(GR_categories))],
                        showlegend=False,
                        width=0.1,
                        hoverinfo='none')] +
                
                [go.Bar(x=age_categories,
                        y=dfM.iloc[x, 2:7],
                        name=dfM.iloc[x, 0],
                        text=dfM.iloc[x, 2:7].astype(str) + '%',
                        hoverinfo='name+y',
                        textposition='inside',
                        textfont={'color': 'Yellow'})
                 for x in range(len(dfM))],
        'layout': go.Layout(title={
                            'text': 'Возрастное (%) распределение по странам: ' + ', '.join(countries),                
                            'y':0.99,
                            'x':0.5,
                            'xanchor': 'center',
                            'yanchor': 'top'},
                            xaxis={}, 
                            yaxis={}, 
                            barmode='group',
                            plot_bgcolor="#111111",
                            paper_bgcolor="#111111",
                            height=600, 
                            font=dict(family="silom",
                                      size=18, color="Yellow")
                           )
        
    }    
##########################################################
app.title = "Kazakhstan Dashboard"
app.layout = html.Div([
  html.Div(className="row", children=[ 
     html.Div([html.Label(['Выберите группу для анализа:'], style={'color': 'yellow'}),
        dcc.Dropdown(id='dropdown',
                     multi=False,
                     clearable=True,
                     disabled=False,
                     style={'display': True},
                     value='Всего',
                     options=[{'label': i, 'value': i} for i in GRlist],
                    )

         ],style={'width':'12%','display':'inline-block','vertical-align':'middle',
                  'marginLeft':16,'marginRight':0,'marginTop':0,
                  'marginBottom':0, 'padding': '1px 1px 1px 1px'
      }), 
      
      html.Div([html.Label(['МКБ-10'], style={'color': 'yellow'}),
        dcc.Dropdown(id='mkb',
                     multi=False,
                     clearable=True,
                     disabled=False,
                     style={'display': True},
                     value='All',
                     options=[{'label': i, 'value': i} for i in mkb_list],
                    )
            ],style={'width':'12%','display':'inline-block','vertical-align':'middle',
                  'marginLeft':16,'marginRight':0,'marginTop':0,
                  'marginBottom':0, 'padding': '1px 1px 1px 1px'
      }), 
        
       html.Div([html.Label(['Информация о системе и авторе'], style={'color': 'yellow'}),
        dcc.Dropdown(id='SysInfo',
                     multi=False,
                     clearable=True,
                     disabled=False,
                     style={'display': True},
                     value='Об авторе (биография)',
                     options=[{'label': i, 'value': i} for i in DocuList],
                    )         

         ],style={'width':'12%','display':'inline-block','vertical-align':'middle',
                  'marginLeft':16,'marginRight':0,'marginTop':0,
                  'marginBottom':0, 'padding': '1px 1px 1px 1px'
      }),  
      
     html.Div(["", 
             dcc.Input(id='my-input', value='KZ-19', type='text', placeholder='', 
             style={'display':'inline-block', 'border': '1px solid black', "height": "30px", 
                    'background-color': "#111111", 'border-color': "#111111", 'color': "#111111", 'width':'5px'})  
       ],style={"background": "#111111", 'width':'5px',"height": "3px", 'marginLeft':19,'marginRight':5}),  
     ]
   ), 
       
 dcc.Tabs(id="tabs-with-classes", 
              value='Table11', 
              parent_className='custom-tabs', 
              className='custom-tabs-container',
        children=[
            dcc.Tab(
                label="Титул-лист системы",
                value="Table11",
                style=tab_style,
                selected_style=tab_selected_style,
                className='custom-tab',
                selected_className='custom-tab--selected'
            ),
            
            dcc.Tab(
                label="Старт",
                value="Table0",
                style=tab_style,
                selected_style=tab_selected_style,
                className='custom-tab',
                selected_className='custom-tab--selected'
            ),
  
           dcc.Tab(
                label="Смертность населения в 2022г",
                value="Table6",
                style=tab_style,
                selected_style=tab_selected_style,
                className='custom-tab',
                selected_className='custom-tab--selected'
            ),
            
            dcc.Tab(
                label="Pаспределение населения по годам",
                value="Table5",
                style=tab_style,
                selected_style=tab_selected_style,
                className='custom-tab',
                selected_className='custom-tab--selected'
            ),
            
            dcc.Tab(
                label="Демография",
                value="Table1",
                style=tab_style,
                selected_style=tab_selected_style,
                className='custom-tab',
                selected_className='custom-tab--selected'
            ),
            dcc.Tab(
                label="Популяция",
                value="Table2",
                style=tab_style,
                selected_style=tab_selected_style,
                className='custom-tab',
                selected_className='custom-tab--selected'
            ),
            dcc.Tab(
                label="Возрастное распределение по странам",
                value="Table3",
                style=tab_style,
                selected_style=tab_selected_style,
                className='custom-tab',
                selected_className='custom-tab--selected'
            ),
            dcc.Tab(
                label="Прогноз заболеваемости",
                value="Table4",
                style=tab_style,
                selected_style=tab_selected_style,
                className='custom-tab',
                selected_className='custom-tab--selected'
            ),
            dcc.Tab(
                label="O системе и авторе",
                value="Table10",
                style=tab_style,
                selected_style=tab_selected_style,
                className='custom-tab',
                selected_className='custom-tab--selected'
            ),
         ],
         style=tabs_styles,
         colors={"border": "yellow", "primary": "red",
                 "background": "#111111",},
     ),html.Div(id='tabs-content-classes')
    
   ],style={"background": "#111111", 'marginLeft':5,'marginRight':20}
  ) 
##########################################################
@app.callback(Output('tabs-content-classes', 'children'),
              Input('tabs-with-classes', 'value'))
def render_content(value): 
    tab=value
    if tab == 'Table0':
        return [html.Div(
            children=[
                    html.H1('Карта Республики Казахстан (для обновления данных кликнике мышкой на выбранную область)', 
                            style={'textAlign': 'center', 'font-size': '42px', 'color': '#00BFFF'}),                       
                    html.Div(
                        className="six columns",
                        children=[html.Div(children=dcc.Graph(id='map_plot1',figure = fig_map(df)))
                        ],style={'width':'49.50%',"height": '610px','display':'inline-block',
                             'vertical-align':'middle',
                             'border':'3px solid','marginLeft':16,'marginRight':0,'marginTop':0,
                             'marginBottom':0, 'padding': '1px 1px 1px 2px'},
                    ),
                
                    html.Div(className="twelve columns",  
                    children=[html.Div(children=dcc.Graph(id='my-graph1')) 
                     ],style={'width':'49.50%',"height": "610px",'display':'inline-block',
                                 'vertical-align':'middle',
                                 'border':'3px solid','marginLeft':3,'marginRight':0,'marginTop':0,
                                 'marginBottom':0, 'padding': '1px 1px 1px 2px'}),
                html.Div(
                className="twelve columns", 
                children=[html.Div(children=dash_table.DataTable(id='tod2022',
                fixed_rows={"headers": True}, 
                style_cell={'backgroundColor': '#111111',
                            'color': 'yellow', 
                            'textAlign':'left','minWidth': 45, 'maxWidth': 95, 'width': 65,
                            'font_size': '16px',"fontWeight": "bold", 'whiteSpace':'normal','height':'auto'},         
                
                style_header={"backgroundColor": "#111111",
                              "color": "yellow",
                              "font-size": "18px",
                              "fontWeight": "bold"
                             },               

                style_table={"height": "400px",
                              "font-size": "18px",
                              "margin": 0,
                              "padding": "8px",
                              "backgroundColor": "#111111"
                              },
                ), style={'width':'99.5%', 'height': '400px',  
                           'marginLeft':3,'marginRight':0,'marginTop':0,
                          },
                )
               ],style={'width':'99.5%',"height": "410px",'display':'inline-block','vertical-align':'middle',
                  'border':'3px solid','marginLeft':16,'marginRight':0,'marginTop':0,
                  'marginBottom':0, 'padding': '1px 1px 1px 2px'},      
               ),
            ])]         
    
    elif tab == 'Table1':
        return [html.Div([
             html.H1('Демография', style={'textAlign': 'center', 'font-size': '42px', 'color': '#00BFFF'}),                
             html.Div(className="six columns",
                children=[
                   html.Div(
                    children=dcc.Graph(id="pie_graph") 
                )
            ],style={'width':'40.0%','display':'inline-block','vertical-align':'middle',
                     'border':'3px solid','marginLeft':16,'marginRight':0,'marginTop':0,
                     'marginBottom':0, 'padding': '5px 0px 0px 0px'},
          ),
          html.Div(
                    className="twelve columns",
                    children=[
                        html.Div(
                            children=dcc.Graph(id='bottom-bar-graph')
                        )
                    ],style={'width':'58.0%','display':'inline-block','vertical-align':'middle',
                         'border':'3px solid','marginLeft':3,'marginRight':0,'marginTop':0,
                         'marginBottom':0, 'padding': '5px 0px 0px 0px'},
                ),
       ])]
    
    elif tab == 'Table2':
        return [html.H1('Популяция',style={'textAlign': "center", 'font-size': '42px', 'color': '#00BFFF'}),
            html.Div(className="six columns",
                children=[html.Div(children=dcc.Graph(id="pop-graph"))
              ],style={'width':'49.5%','display':'inline-block','vertical-align':'middle',
                 'border':'3px solid','marginLeft':16,'marginRight':0,'marginTop':0,
                 'marginBottom':0, 'padding': '5px 0px 0px 0px'},  
            ),                 
            html.Div(className="twelve columns",
                    children=[html.Div(children=dcc.Graph(id='sun_graph'))    
              ],style={'width':'49.5%', 'display':'inline-block',
                             'vertical-align':'middle',
                             'horizontal-align':'middle',                                  
                             'border':'3px solid','marginLeft':3,'marginRight':0,'marginTop':0,
                             'marginBottom':0, 'padding': '5px 0px 0px 0px'},                     
             ),          
        ]
    
    elif tab == 'Table3':
        return [html.H1('Возрастное распределение населения по данным ВОЗ (по избранным странам)',
                         style={'textAlign': "center", 'font-size': '42px', 'color': '#00BFFF'}),
           html.Div(
            className="six columns",
                children=[
                   html.Div(    
                    children=dcc.Graph(id='median_age_graph')
                   )], style={'width':'49.5%',"height": "610px", 'display':'inline-block','vertical-align':'middle',
                              'border':'3px solid','marginLeft':16,'marginRight':0,'marginTop':0,
                              'marginBottom':0, 'padding': '5px 1px 1px 1px'},                                           
                
          ),
                
            html.Div([        
             dcc.Graph(id='age_graph')
             ],style={'width':'49.5%', "height": "610px", 'display':'inline-block','vertical-align':'middle',
                      'border':'3px solid','marginLeft':3,'marginRight':0,'marginTop':0,
                      'marginBottom':0, 'padding': '5px 1px 1px 1px'},                  
          )                
        ]
     
    elif tab == 'Table4':
        print("Table4 OK!")
        return [html.H1("Прогноз заболеваемости с помощью анализа временных рядов (условные данные)", 
                 style={'textAlign': 'center', 'font-size': '42px', 'color': '#00BFFF'}),
            html.Div(
                className="row",
                children=[
                html.Div(
                  className="twelve columns",
                  children=[
                    html.Div(
                       children=dcc.Graph(id="graph_close"),
                      )
                   ],style={'width':'98.5%', "height": '508px', 
                            'border':'3px solid','marginLeft':16,'marginRight':0,'marginTop':5,
                            'marginBottom':0, 'padding': '1px 1px 1px 2px'},
                    ),
                   ] 
                  ),
        
                html.Div(dash_table.DataTable(
                id='table-end',
                data=FP.to_dict('records'),    
                columns=[
                    {"name": i, "id": i, "deletable": True, "selectable": True} for i in FP.columns
                  ],
                fixed_rows={"headers": True, "data": 4},  
                style_cell={"width": "100px",
                              'backgroundColor': '#111111',
                              'color': 'yellow'          
                             },
                
                style_header={"backgroundColor": "#111111",
                              "color": "yellow",
                              "font-size": "12px",
                              "fontWeight": "bold"
                             },               

                style_table={"height": "250px",
                              "font-size": "18px",
                              "margin": 0,
                              "padding": "8px",
                              "backgroundColor": "#111111"
                              }), style={'width':'99.95%', 'height': '257px',  
                                 'border':'3px solid','marginLeft':3,'marginRight':0,'marginTop':10,
                                 'marginBottom':0, 'padding': '1px 1px 1px 2px'}
               ) 
            ]    
    
    elif tab == 'Table5':
        print("Table5 OK!")
        return [html.Div([
             html.H1('Анализ распределения населения области по годам наблюдения по официальным данным', style={'textAlign': 'center', 'font-size': '42px', 'color': '#00BFFF'}),                
             html.Div(
                    className="six columns",
                    children=[html.Div(children=dcc.Graph(id='my-graph5'))
                    ],style={'width':'49.5%',"height": "610px",'display':'inline-block','vertical-align':'middle',
                         'border':'3px solid','marginLeft':3,'marginRight':0,'marginTop':0,
                         'marginBottom':0, 'padding': '5px 0px 0px 0px'},
                ),
            
             html.Div(className="six  columns",  
                    children=[html.Div(children=dcc.Graph(id='popylation', figure=FigurePop(svalue))), 
                     ],style={'width':'49.50%',"height": "610px",'display':'inline-block',
                                 'vertical-align':'middle',
                                 'border':'3px solid','marginLeft':3,'marginRight':0,'marginTop':0,
                                 'marginBottom':0, 'padding': '1px 1px 1px 2px'}),  
              html.Div(
                className="twelve columns", 
                children=[html.Div(children=dash_table.DataTable(id='table-year',
               
                                                                 
                fixed_rows={"headers": True}, #, "data": 4},                                                 
                style_cell={"width": "100px",
                            'backgroundColor': '#111111',
                            'color': 'yellow'          
                             },
                
                style_header={"backgroundColor": "#111111",
                              "color": "yellow",
                              "font-size": "18px",
                              "fontWeight": "bold"
                             },               

                style_table={"height": "400px",
                              "font-size": "18px",
                              "margin": 0,
                              "padding": "8px",
                              "backgroundColor": "#111111"
                              }), style={'width':'99.5%', 'height': '405px',  
                                 #'border':'3px solid',
                                 'marginLeft':3,'marginRight':0,'marginTop':0,
                                 'marginBottom':0, 'padding': '1px 1px 1px 2px'
                                }
          )                                                  
        ],style={'width':'49.5%',"height": "410px",'display':'inline-block','vertical-align':'middle',
                  'border':'3px solid',
                  'marginLeft':3,'marginRight':0,'marginTop':0,
                  'marginBottom':0, 'padding': '5px 0px 0px 0px'},
       ),
        
       html.Div(
                className="twelve columns", 
                children=[html.Div(children=dash_table.DataTable(id='table2122',
                fixed_rows={"headers": True}, #, "data": 4},                                                 
                style_cell={"width": "100px",
                            'backgroundColor': '#111111',
                            'color': 'yellow'          
                             },
                
                style_header={"backgroundColor": "#111111",
                              "color": "yellow",
                              "font-size": "18px",
                              "fontWeight": "bold"
                             },               

                style_table={"height": "400px",
                              "font-size": "18px",
                              "margin": 0,
                              "padding": "8px",
                              "backgroundColor": "#111111"
                              }), style={'width':'99.5%', 'height': '405px',  
                                 #'border':'3px solid',
                                 'marginLeft':3,'marginRight':0,'marginTop':0,
                                 'marginBottom':0, 'padding': '1px 1px 1px 2px'
                                }
          )                                                  
        ],style={'width':'49.5%',"height": "410px",'display':'inline-block','vertical-align':'middle',
                  'border':'3px solid',
                  'marginLeft':3,'marginRight':0,'marginTop':0,
                  'marginBottom':0, 'padding': '5px 0px 0px 0px'},
       ),     
            
    ])]
    
    elif tab == 'Table6':
        print("Table6 OK!")
        return [html.Div([
             html.H1('Анализ смертности населения по возрасту, полу, и МКБ-10 в 2022г', style={'textAlign': 'center', 'font-size': '42px', 'color': '#00BFFF'}),                
             html.Div(className="six  columns",  
                    children=[html.Div(children=dcc.Graph(id='my-graph6')), 
                     ],style={'width':'49.50%',"height": "610px",'display':'inline-block',
                                 'vertical-align':'middle',
                                 'border':'3px solid','marginLeft':3,'marginRight':0,'marginTop':0,
                                 'marginBottom':0, 'padding': '1px 1px 1px 2px'}),  
            
             html.Div(className="twelve columns",  
                    children=[html.Div(children=dcc.Graph(id='mkb-graph', figure=FigureTod2(svalue)))
                     ],style={'width':'49.50%',"height": "610px",'display':'inline-block',
                                 'vertical-align':'middle',
                                 'border':'3px solid','marginLeft':3,'marginRight':0,'marginTop':0,
                                 'marginBottom':0, 'padding': '1px 1px 1px 2px'}),

     ])] 

    elif tab == 'Table11':
        return html.Div([
               #Front_path = 'assets/Front.jpg'
               #html.Div(id='tabs-div', children=[Front_image], className='tab-div'),    
               #html.Img(src=b64_image(Front_path),
               html.Img(src=b64_image('assets/Front4.jpg'),
                        style={
                        "display": "inline-block",
                        "width": "99.75%",
                        #"height": "610px",    
                        "margin-left": "3px",
                        "margin-right": "0px", 
                        'marginTop':0,   
                        'marginBottom':0, 'padding': '1px 1px 1px 2px',    
                        "verticalAlign": "top"
               })
            ])
    
    elif tab == "Table10":
        return html.Div(id='container'),
    
@app.callback(Output('container', 'children'),
             Input('SysInfo', 'value')) 

def snapshot_page(value):
    #print(value)
    if value == 'Об авторе (профиль)':
        img=1
        Text="Профессиональный профиль"
        MDfile=profil
    elif value == 'Об авторе (биография)':
        img=1
        Text="Краткая биография"
        MDfile=resume
    elif value == 'Об авторе (проекты)':
        img=1
        Text="Научно-технические проекты (1974-2023)"
        MDfile=proects
    elif value == 'Об авторе (публикации)':
        img=1
        Text="Публикации (70+)"
        #MDfile=papers
        MDfile=papers2023
    elif value == 'Об авторе (Контакты)':
        img=1
        Text="Контакты"
        MDfile=kontakt
    elif value == 'Система: инструкция':
        img=0
        Text='Инструкция по эксплуатации Аналитической Информационной Системы «АИС ВTИИ»'
        MDfile=System1      
    elif value == 'Система: описание':
        img=0
        Text="Аналитическая Информационная Система «АИС ВTИИ»"
        MDfile=System2   
    elif value == 'Система: история создания':
        img=4
        Text="История разработки Аналитической Информационной Системы в медицине, здравоохранении и смежных областях"
        MDfile=System3  
             
    if img==1:
        return html.Div([
            html.Div([
            #html.Div(id='tabs-div', children=[image], className='tab-div'), 
            #image = html.Img(src='assets/WagnerFoto.jpg', style={"height":"200", "width":"150", 'padding-left': 220,})  
            html.Img(src=b64_image('assets/WagnerFoto.jpg'),
                        style={
                        "display": "inline-block",
                        "width": "150px",
                        "height": "200px",    
                        "margin-left": "220px",
                        "margin-right": "0px", 
                        'marginTop':0,   
                        'marginBottom':0, 'padding': '1px 1px 1px 1px',    
                        "verticalAlign": "top"
               }), 
            html.H1(children=Text, style={'color': 'white', 'textAlign': 'left', 'padding-left': 100}),
            html.H1(children="x", style={'color': "#111111", 'textAlign': 'left', 'padding-left': 100, "font-size": "2.4rem", "line-height": "0.7em"}),            
            html.Div([dcc.Markdown(children=MDfile)], style={'color': 'yellow', "font-size": "1.4rem", 'padding-left': 100, 'display': 'display-inblock'}),
            #html.Br()    
         ]),
        ])
    elif img==0:
        return html.Div([
            html.Div([
            html.H1(children=Text, style={'color': 'white', 'textAlign': 'left', 'padding-left': 100, "font-size": "2.4rem"}),    
            html.H1(children="x", style={'color': "#111111", 'textAlign': 'left', 'padding-left': 100, "font-size": "2.4rem", "line-height": "0.7em"}),            
            html.Div([dcc.Markdown(children=MDfile)], style={'color': 'yellow', "font-size": "1.4rem", 'padding-left': 100, 'display': 'display-inblock'}),
            html.Br()    
             ]),
           ])
    elif img==4:
        return html.Div([
            html.Div([
            html.H1(children=Text, style={'color': 'white', 'textAlign': 'left', 'padding-left': 100, "font-size": "2.4rem"}),    
            html.H1(children="x", style={'color': "#111111", 'textAlign': 'left', 'padding-left': 100, "font-size": "2.4rem", "line-height": "0.7em"}), 
            html.Div([dcc.Markdown(children=MDfile)], style={'color': 'yellow', "font-size": "1.4rem", 'padding-left': 100, 'display': 'display-inblock'}),
            html.Br(),  
              
            html.H1(children="Приложение", style={'color': 'white', 'textAlign': 'left', 'padding-left': 100, "font-size": "2.4rem"}), 
            html.H2(children='1. Документы о совместной лаборатории «Математического моделирования в медицине и экологии»"', style={'color': 'white', 'textAlign': 'left', 'padding-left': 100, "font-size": "2.0rem"}),   
            html.H1(children="x", style={'color': "#111111", 'textAlign': 'left', 'padding-left': 100, "font-size": "2.4rem", "line-height": "0.7em"}),            
            html.H2(children="1.1 Письмо Академику Амербаеву и его рекомендации по созданию совместной лаборатории, октябрь 1994", style={'color': 'white', 'textAlign': 'left', 'padding-left': 100, "font-size": "2.0rem"}),    
            html.Img(src=b64_image('assets/Amerbaew.jpg'),
                        style={
                        "display": "inline-block",
                        "width": "40%",
                        "height": "1200px",    
                        "margin-left": "200px",
                        "margin-right": "0px", 
                        'marginTop':0,   
                        'marginBottom':0, 'padding': '1px 1px 1px 1px',    
                        "verticalAlign": "top"
               }), 
               
               html.H1(children="x", style={'color': "#111111", 'textAlign': 'left', 'padding-left': 100, "font-size": "2.4rem", "line-height": "0.7em"}), 
               html.H2(children="1.2 Совместный Приказ Института Математики и Научного Центра Минздрава о создании совместной лаборатории", style={'color': 'white', 'textAlign': 'left', 'padding-left': 100, "font-size": "2.0rem"}),    
               html.Img(src=b64_image('assets/Labor1.jpg'),
                        style={
                        "display": "inline-block",
                        "width": "40%",
                        "height": "1200px",    
                        "margin-left": "200px",
                        "margin-right": "0px", 
                        'marginTop':0,   
                        'marginBottom':0, 'padding': '1px 1px 1px 1px',    
                        "verticalAlign": "top"
               }), 
              html.H1(children="x", style={'color': "#111111", 'textAlign': 'left', 'padding-left': 100, "font-size": "2.4rem", "line-height": "0.7em"}),      
              html.H2(children="1.3 Совместно утвержденное Положение о лаборатории со стороны Института Математики и Научного Центра Минздрава РК", style={'color': 'white', 'textAlign': 'left', 'padding-left': 100, "font-size": "2.0rem"}),    
              html.Img(src=b64_image('assets/Labor2.jpg'),
                        style={
                        "display": "inline-block",
                        "width": "40%",
                        "height": "1200px",    
                        "margin-left": "200px",
                        "margin-right": "0px", 
                        'marginTop':0,   
                        'marginBottom':0, 'padding': '1px 1px 1px 1px',    
                        "verticalAlign": "top"
               }), 
              
             html.H1(children="x", style={'color': "#111111", 'textAlign': 'left', 'padding-left': 100, "font-size": "2.4rem", "line-height": "0.7em"}),   
             html.H1(children="2. Избранная информация о опубликованных и находящихся в разработке научных монографиях автора в области анализа и прогноза здоровья населения", style={'color': 'white', 'textAlign': 'left', 'padding-left': 100, "font-size": "2.4rem"}),     
             html.H2(children="2.1 Обложка монографии. Алма-Ата 1995 ", style={'color': 'white', 'textAlign': 'left', 'padding-left': 100, "font-size": "2.0rem"}),      
             html.Img(src=b64_image('assets/Monograph1.jpg'),
                        style={
                        "display": "inline-block",
                        "width": "60%",
                        "height": "900px",    
                        "margin-left": "200px",
                        "margin-right": "0px", 
                        'marginTop':0,   
                        'marginBottom':0, 'padding': '1px 1px 1px 1px',    
                        "verticalAlign": "top"
               }), 
              
             html.H1(children="x", style={'color': "#111111", 'textAlign': 'left', 'padding-left': 100, "font-size": "2.4rem", "line-height": "0.7em"}),  
             html.H2(children="2.2 Рецензия на монографию О.Сакбаева и А.Вагнера", style={'color': 'white', 'textAlign': 'left', 'padding-left': 100, "font-size": "2.0rem"}),      
             html.Img(src=b64_image('assets/Monograph2.jpg'),
                        style={
                        "display": "inline-block",
                        "width": "60%",
                        "height": "900px",    
                        "margin-left": "200px",
                        "margin-right": "0px", 
                        'marginTop':0,   
                        'marginBottom':0, 'padding': '1px 1px 1px 1px',    
                        "verticalAlign": "top"
               }), 

             html.H1(children="x", style={'color': "#111111", 'textAlign': 'left', 'padding-left': 100, "font-size": "2.4rem", "line-height": "0.7em"}),    
             html.H1(children="Примечание", style={'color': 'white', 'textAlign': 'left', 'padding-left': 100, "font-size": "2.4rem"}),             
             html.H2(children="   В настоящее время автор готовит продолжение и работает над монографией под временным названием «Современные методы анализа и прогноза данных о состоянии здоровья населения». В этой работе будет обобщен и систематизирован 30 летний опыт работы автора в научно-исследовательских организациях и предприятиях, занимающихся анализом клинических исследований, оптимизацией и совершенствованием системы здравоохранения; опыт работы в крупных мировых фармоцевтических и страховых компаниях, связанных с вопросами анализа и прогноза здоровья населения, анализом влиянием различных факторов и режимов лечения на результаты терапии и оценка её стоимости для государства. Примерами таких проектов являются, например, следующие:", style={'color': 'white', 'textAlign': 'left', 'padding-left': 100, "font-size": "2.0rem"}),       
             html.H1(children="x", style={'color': "#111111", 'textAlign': 'left', 'padding-left': 100, "font-size": "2.4rem", "line-height": "0.5em"}),                       
             html.H3(children="а) Оценка стоимости терапии и прогноз стоимости реабилитации пациентовв, перенесших инфаркт-инсульт на основании данных государственного регистра этих случаев (Эрланген-регистр) и даных Государственного статистического бюро Германии (Висбаден). По нашим расчетам и прогнозам это составило примерно 50.000€ в год на одного пациента.", style={'color': 'white', 'textAlign': 'left', 'padding-left': 100, "font-size": "1.8rem"}),               
             html.H1(children="x", style={'color': "#111111", 'textAlign': 'left', 'padding-left': 100, "font-size": "2.4rem", "line-height": "0.5em"}),                    
             html.H3(children="б) Математическое моделирование при помощи метода Монте-Карло для сравнения стоимости двух способов лечения (см. скрин статьи ниже).", style={'color': 'white', 'textAlign': 'left', 'padding-left': 100, "font-size": "1.8rem"}),               
             html.Img(src=b64_image('assets/Paper1.jpg'),
                        style={
                        "display": "inline-block",
                        "width": "60%",
                        "height": "650px",    
                        "margin-left": "200px",
                        "margin-right": "0px", 
                        'marginTop':0,   
                        'marginBottom':0, 'padding': '1px 1px 1px 1px',    
                        "verticalAlign": "top"
               }), 
              
             html.H1(children="x", style={'color': "#111111", 'textAlign': 'left', 'padding-left': 100, "font-size": "2.4rem", "line-height": "0.7em"}), 
             html.H3(children=" в) Проект в области кардиологии (см. скрин статьи ниже). Работа была доложена на пленарном заседании международного Кадиоконгресса в Барселоне, 2009 г.   ", style={'color': 'white', 'textAlign': 'left', 'padding-left': 100, "font-size": "1.8rem"}),       
             html.Img(src=b64_image('assets/Paper2.jpg'),
                        style={
                        "display": "inline-block",
                        "width": "60%",
                        "height": "900px",    
                        "margin-left": "200px",
                        "margin-right": "0px", 
                        'marginTop':0,   
                        'marginBottom':0, 'padding': '1px 1px 1px 1px',    
                        "verticalAlign": "top"
               }), 
             html.H1(children="x", style={'color': "#111111", 'textAlign': 'left', 'padding-left': 100, "font-size": "2.4rem", "line-height": "0.7em"}),
             html.H2(children="   Автор также использует результаты и многолетний опыт построения «Автоматизированных систем научных исследований в медицине и смежных областях». Работа над этой монографией началась более 20 лет назад и планируется быть законченой в ближайшие 1-2 года. ", style={'color': 'white', 'textAlign': 'left', 'padding-left': 100, "font-size": "2.0rem"}),        
             html.H2(children="Справка:", style={'color': 'white', 'textAlign': 'left', 'padding-left': 100, "font-size": "2.0rem"}),        
             html.H3(children="   Автор оказал помощь в анализе данных для диссертационных работ на соискание ученой степени кандидата медицинских наук (12 соискателям) и на соискание ученой степени доктора медицинских наук (6 соискателям). Соискатели ученых степеней были гражданами Казахстана, Германии, Австрии и Египта", style={'color': 'white', 'textAlign': 'left', 'padding-left': 100, "font-size": "1.8rem"}),       
            ])    
          ])
@app.callback(Output("pie_graph", "figure"), 
              Input("my-input", "value"))

def drawFigurePie(value):
    ID1=value
    df2=df[df['ID1']==ID1]
    figure = px.pie(df2,
    values='POP',
    names='IDNAME', 
    template="plotly_dark", 
    hole=.3,                                    
    height=600, 
    color_discrete_sequence = px.colors.sequential.Plasma_r)
    figure.update_layout(autosize=False, font=dict(family="silom",size=14, color="Yellow"))
    figure.update_layout(title={
        'text': "Prozentuale Verteilung der Bevölkerungszahl in der Region nach Territorium",                                    
        'y':0.99,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'},
        font=dict(family="silom",size=18,color="Yellow"))
 
    return figure

@app.callback(Output("bottom-bar-graph", "figure"), 
              Input("my-input", "value"))

def drawFigureBar(value):
    ID1=value 
    df1=df[df['ID1']==ID1]
        
    figure = px.bar(df1, x="IDNAME", y="POP", 
    title="Absolute Verteilung der Bevölkerungszahl in der Region nach Territorium",                
    orientation= 'v',
    height=600,                     
    color = "POP", hover_data={'POP': False},
    labels=dict(POP="Anzahl", IDNAME="Territorium"),                
    color_discrete_sequence = px.colors.sequential.Plasma_r).update_layout(
    font=dict(family="silom",
               size=14, 
               color="Yellow"),
    plot_bgcolor = "#111111",
    paper_bgcolor= "#111111")
    figure.update_xaxes(tickangle=45, title_text="Territorium",title_font={"size": 14},
    title_standoff=5, tickfont=dict(family='silom', color='Yellow', size=12))
    figure.update_yaxes(title_text="Anzahl",title_font={"size": 12},title_standoff=5)
    figure.update_layout(title={
        'text': "Absolute Verteilung der Bevölkerungszahl in der Region nach Territorium",                
        'y':0.99,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'},
        font=dict(family="silom",size=18,color="Yellow"))
        
    return figure

@app.callback(Output("pop-graph", "figure"), 
              Input("my-input", "value"))    
def pyramide(value):  
    ID1=value 
    df1=df[df['ID1']==ID1]
    df1=pop[pop['ID']==ID1] 
    men_bins = df1['MKN'].to_numpy()
    women_bins = df1['FKN'].to_numpy()
    
    layout = go.Layout(yaxis=go.layout.YAxis(title='Alter'),
                       xaxis=go.layout.XAxis(
                           range=[-5, 5],
                           tickvals=[-6, 6],
                           title=''
                           ),
                           title="Популяционная пирамида (%)",                
                           plot_bgcolor = "#111111",
                           paper_bgcolor= "#111111",
                           barmode='overlay',
                           bargap=0.1)
    
    
    data = [go.Bar(y=y,
                   x=men_bins,
                   orientation='h',
                   name='Männer',
                   hoverinfo='x',
                   marker=dict(color='powderblue')
                   ),
            go.Bar(y=y,
                   x=women_bins,
                   orientation='h',
                   name='Frauen',
                   text=-1 * women_bins.astype('int'),
                   hoverinfo='text',
                   marker=dict(color='seagreen')
                   )]
    figure = go.Figure(data=data, layout=layout)
    figure.update_layout(autosize=False, 
                         height=600, 
               font=dict(family="silom",size=14, color="Yellow"))
    figure.update_yaxes(title_text="Alter",title_font={"size": 14},
    title_standoff=5, tickfont=dict(family='silom', color='Yellow', size=12))
    figure.update_layout(title={
        'text': "Популяционная пирамида (%)",
        'y':0.99,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'},
        font=dict(family="silom",size=18,color="Yellow"))

    return figure   

@app.callback(Output("sun_graph", "figure"), 
              Input("my-input", "value"))  

def update_sungraph(value):
    ID1=value 
    df1=df[df['ID1']==ID1]
    color_discrete_sequence=['', '#FFAA00', '#00BFFF', '#2D5F91','#819FBD','#819FBD','#91D4D2', '#96BEE6', '#C0D8F0','#E8655F','#F1A39F','#48B7B4']

    fig = px.sunburst(df1, path=["IDNAME", "POP"])
 
    figure =go.Figure(go.Sunburst(
                    labels=fig['data'][0]['labels'].tolist(),
                    parents=fig['data'][0]['parents'].tolist(),
                    marker=dict(colors=color_discrete_sequence)  #funktioniert nicht!   
                  )
                )

    figure.update_layout(title={
                'text': "Популяция по территориям",
                'y':0.99,
                'x':0.5,
                'xanchor': 'center',
                'yanchor': 'top'},
                font=dict(family="silom",size=18,color="Yellow"),         
                height=600,
                margin = dict(t=0, l=50, r=0, b=0), 
                plot_bgcolor = "#111111",
                paper_bgcolor= "#111111")
      
    return figure

#Median    
@app.callback(Output('median_age_graph', 'figure'),
              Input("my-input", "value"))  

def plot_median_age(value):
    value='Afghanistan,Afghanistan,Kazakhstan,Germany,Japan,United States,Uzbekistan'
    countries = value.split(",") 
    dfM = age_df[age_df['country'].isin(countries)]
    return {
        'data': [go.Scatter(x=age_df['country'],
                            y=age_df['median_age_total'],
                            mode='markers',
                            showlegend=False,
                            legendgroup='one',
                            name='',
                            hoverlabel={'font': {'size': 20}},
                            marker={'color': '#bbbbbb'})] +
                [go.Scatter(x=dfM[dfM['country']==c]['country'],
                            y=dfM[dfM['country']==c]['median_age_total'],
                            mode='markers',
                            marker={'size': 15},
                            hoverlabel={'font': {'size': 20}},
                            name=c)
                 for c in sorted(countries)],
                        'layout': go.Layout(title={
                            'text': 'Возрастная медиана по странам: ' + ', '.join(countries),                
                            'y':0.99,
                            'x':0.5,
                            'xanchor': 'center',
                            'yanchor': 'top'},
                                         xaxis={
                                   #'title': 'Countries', 
                                   'zeroline': False, 
                                   'showticklabels': False},
                            yaxis={
                                  'zeroline': False},
                            paper_bgcolor="#111111",
                            plot_bgcolor="#111111",
                            height=600, 
                            font=dict(family="silom",
                                      size=18, 
                                      color="Yellow")
       ),
    }
    
@app.callback(Output('age_graph', 'figure'),
             Input("my-input", "value"))   
              
def plot_countries(value):
    value='Afghanistan,Afghanistan,Kazakhstan,Germany,Japan,United States,Uzbekistan'
    countries = value.split(",") 
    dfM = age_df[age_df['country'].isin(countries)]
          
    return {
        'data': [go.Bar(x=age_categories,
                        y=[0 for i in range(len(age_categories))],
                        showlegend=False,
                        width=0.1,
                        hoverinfo='none')] +
                
                [go.Bar(x=age_categories,
                        y=dfM.iloc[x, 2:7],
                        name=dfM.iloc[x, 0],
                        text=dfM.iloc[x, 2:7].astype(str) + '%',
                        hoverinfo='name+y',
                        textposition='inside',
                        textfont={'color': 'Yellow'})
                 for x in range(len(dfM))],
        'layout': go.Layout(title={
                            'text': 'Возрастное (%) распределение по странам: ' + ', '.join(countries),                
                            'y':0.99,
                            'x':0.5,
                            'xanchor': 'center',
                            'yanchor': 'top'},
                            xaxis={}, 
                            yaxis={}, 
                            barmode='group',
                              #color='y',
                              #color_discrete_sequence=go.colors.sequential.Viridis,
                            plot_bgcolor="#111111",
                            paper_bgcolor="#111111",
                            height=600, 
                            font=dict(family="silom",
                                      size=18, color="Yellow")
                           )
        
    }    

@app.callback(Output('graph_close', 'figure'), 
             Input("my-input", "value")) 

def drawPropeth(value):
    trace_line = go.Scatter(x=list(df_stock.ds),
                                y=list(df_stock.y),
                                name="Aktual",
                                showlegend=True)
   
    pred_line = go.Scatter(x=list(df_pred.ds),
                                y=list(df_pred.yhat_upper),
                                name="Prediction",
                                showlegend=True)
    data = [trace_line, pred_line] 
     
    layout = dict(
        height=500,
        autosize=False,
        plot_bgcolor="#111111",
        paper_bgcolor="#111111",
        legend=dict(x=0.95, y=0.99,
            traceorder="normal",
            title='Aktual & Prognose',
            font=dict(family="silom", size=14, color="yellow"),
            bgcolor='#111111',
            bordercolor='#FFFFFF',
            borderwidth=2
        ),   
        
        yaxis=dict(
        title='Общая заболеваемость',
        titlefont=dict(
            family='silom"',
            size=12,
            color='yellow'
        ),
        showticklabels=True,
        tickfont=dict(
            family='Old Standard TT, serif',
            size=12,
            color='yellow'
        ),
      ),
         
        xaxis=dict(
            showticklabels=True,
            tickfont=dict(
                family='Old Standard TT, serif',
                size=12,
                color='yellow'
            ),
            
            showgrid=True, 
            gridcolor='rgb(255, 255, 255)',
            gridwidth=1,       
            rangeselector=dict(
                buttons=list([
                    dict(count=1,
                         label='1m',
                         step='month',
                         stepmode='backward'),
                    dict(count=6,
                         label='6m',
                         step='month',
                         stepmode='backward'),
                    dict(count=1,
                         label='YTD',
                         step='year',
                         stepmode='todate'),
                    dict(count=1,
                         label='1y',
                         step='year',
                         stepmode='backward'),
                    dict(step='all')
                ])
            ),
            rangeslider=dict(visible=True),
            type='date'
        ) 
    )
    return {"data": data, "layout": layout}

@app.callback(
    Output(component_id='my-graph1', component_property='children'),
    Output("my-input", "value"),
    Input(component_id='map_plot1', component_property='clickData'))

def update_graph(clickData):
    if clickData:
        city = clickData['points'][0]['hovertext']
        value=city
        land = country[country['ID'] == city]
  
        fig1 = px.bar(land,  x='year', y="pop", 
            orientation= 'v',
            height=300,                     
            color = "pop", hover_data={'pop': False},
            labels=dict(y="Anzahl", x="Year"), 
     
        color_discrete_sequence = px.colors.sequential.Plasma_r).update_layout(
        font=dict(family="silom",
                   size=14, 
                   color="Yellow"),
        plot_bgcolor = "#111111",
        paper_bgcolor= "#111111")
         
        fig1.update_xaxes(tickangle=45, title_text="Territorium",title_font={"size": 14},
        title_standoff=5, tickfont=dict(family='silom', color='Yellow', size=12))
        fig1.update_yaxes(title_text="Anzahl",title_font={"size": 12},title_standoff=5)
        
        fig1.update_layout(title={
            'y':0.99,
            'x':0.5,
            'xanchor': 'center',
            'yanchor': 'top'},
            font=dict(family="silom",size=18,color="Yellow"))
        return dcc.Graph(figure=fig1), value   
 
 
@app.callback(Output("my-graph1", "figure"),
              [Input('dropdown', 'value')])
              
def FigureStart(value):
    Tsummy = Tod_summy[Tod_summy['GR'] == value]
    Tsummy = Tsummy[Tsummy['F1'] != 'All'] 
    Tsummy.head() 
    land = Tsummy 
      
    figure = px.bar(land,  x='F1', y="SUMM", 
    title="Распределение смертности население в 2022г. по МКБ-10",             
    orientation= 'v',
    height=605,                     
    color = "SUMM", hover_data={'SUMM': False},
    text='SUMM',                    
    labels=dict(y="Количество", x="МКБ-10"), 
        
    color_discrete_sequence = px.colors.sequential.Plasma_r).update_layout(
    font=dict(family="silom",
               size=18, 
               color="Yellow"),
    plot_bgcolor = "#111111",
    paper_bgcolor= "#111111")
     
    figure.update_xaxes(tickangle=45, title_text="МКБ-10",title_font={"size": 18},
    title_standoff=5, tickfont=dict(family='silom', color='Yellow', size=14))
    figure.update_yaxes(title_text="Количество",title_font={"size": 18},title_standoff=5)
    
    figure.update_layout(title={
        'y':0.99,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'},
        font=dict(family="silom",size=18,color="Yellow"))
    return figure   
              
              

@app.callback(Output("my-graph5", "figure"),
              Input("my-input", "value"))

def FigureBarTable5(value):
    print("FigureBarTable5 wurde gestartet!")
    ID1=value 
    land = country[country['ID'] == ID1]
    figure = px.bar(land,  x='year', y="pop", 
    title="Распределение население области по годам за период 1990-2021",             
    orientation= 'v',
    height=600,                     
    color = "pop", hover_data={'pop': False},
    text='pop',                    
    labels=dict(y="Количество", x="Год"), 
        
    color_discrete_sequence = px.colors.sequential.Plasma_r).update_layout(
    font=dict(family="silom",
               size=18, 
               color="Yellow"),
    plot_bgcolor = "#111111",
    paper_bgcolor= "#111111")
     
    figure.update_xaxes(tickangle=45, title_text="Год",title_font={"size": 18},
    title_standoff=5, tickfont=dict(family='silom', color='Yellow', size=14))
    figure.update_yaxes(title_text="Количество",title_font={"size": 18},title_standoff=5)
    
    figure.update_layout(title={
        'y':0.99,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'},
        font=dict(family="silom",size=18,color="Yellow"))
    return figure   

@app.callback([Output(component_id='table-year', component_property='data'), 
               Output(component_id='table-year', component_property='columns')],
              [Input("my-input", "value")])

def update_table(value ):
    print("FigureBarTable5 wurde gestartet!")
    ID1=value 
    land = country[country['ID'] == ID1]
    columns = [{'name': col, 'id': col} for col in land.columns]
    data = land.to_dict(orient='records')
    return data, columns

@app.callback([Output(component_id='table2122', component_property='data'), 
               Output(component_id='table2122', component_property='columns')],
              [Input("my-input", "value")])

def update_table(value ):
    print("FigureBarTable5 wurde gestartet!")
    ID1=value 
    land = allpop
    columns = [{'name': col, 'id': col} for col in land.columns]
    data = land.to_dict(orient='records')
    return data, columns

@app.callback([Output(component_id='tod2022', component_property='data'), 
               Output(component_id='tod2022', component_property='columns')],
              [Input('dropdown', 'value')]) 

def update_table1(value ):     
    land = tod2022[tod2022['GR'] == value]
    land.drop(['GR'], axis=1, inplace=True)
    columns = [{'name': col, 'id': col} for col in land.columns]
    data = land.to_dict(orient='records')
    style_data={
         'whiteSpace': 'normal',
         'height': 'auto',
    },
    fill_width=False 
    return data, columns

@app.callback(Output("my-graph6", "figure"),
              [Input('mkb', 'value')])

def FigureTod1(value):
    land = tod1[tod1['F1'] == value] 
    
    figure = px.bar(land,  x='AGE', y="Count",
    barmode="group",                 
    title="Распределение смертности по возрасту, полу и MKB-10",             
    orientation= 'v',
    height=605,                     
    hover_data={'Count': False},
    text='Count',                    
    labels=dict(y="Количество", x="Boзраст"), 
    color="GR",    
    ).update_layout(
    font=dict(family="silom",
               size=18, 
               color="Yellow"),
    plot_bgcolor = "#111111",
    paper_bgcolor= "#111111")
     
    figure.update_xaxes(tickangle=45, title_text="Возраст",title_font={"size": 18},
    title_standoff=5, tickfont=dict(family='silom', color='Yellow', size=14))
    figure.update_yaxes(title_text="Количество",title_font={"size": 18},title_standoff=5)
    
    figure.update_layout(title={
        'y':0.99,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'},
        font=dict(family="silom",size=18,color="Yellow"))
    return figure 

if __name__ == '__main__':
    app.run(debug=False)

#if __name__ == '__main__':
#    app.run_server(debug=False, port=8085)
